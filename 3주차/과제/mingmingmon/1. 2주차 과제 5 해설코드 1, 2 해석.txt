5-1의 경우는 Integer에 대해 새로운 정렬 기준을 작성했습니다.
이 경우에는 Comparator interface의 compare method를 implement 해야 합니다.
따라서 Integer 객체 2개를 입력 받아서 비교해야 합니다.
자연스럽게 PriprotyQueue에서 다루는 자료형은 Integer이고, 기본적인 우선순위큐의
정렬기준이 아닌, 새로 선언한 정렬기준 AbsComparator()를 전달합니다.

5-2의 경우에는 Abs라는 class를 선언하고 그 클래스를 정렬하는 커스텀 정렬기준을
Comparable interface의 compareTo method를 implement 하면서 선언했습니다.
이는 비교대상이 compareTo method를 부르는 인스턴스 자신과 다른 인스턴스 이므로,
compareTo의 인자는 다른 인스턴스 하나만 있으면 됩니다.
자연스럽게 PriorityQueue에서 다루는 자료형은 Abs 클래스의 객체이고 Abs 클래스에서
그 클래스를 정렬할 기준을 이미 선언했으니, 우선순위큐에 커스텀 정렬기준을
전달할 필요가 없습니다.

<절댓값 힙> 문제는 정수를 입력받고, 문제 조건에 맞는 새로운 정렬기준을 작성해야 했습니다.
만약, 정수가 아닌 다른 구조체(class)를 정렬해야 했다면 다양한 변수(field)를 고려해야 하므로
5-2 풀이가 적절할 것입니다. 그러나 우리는 정수 하나를 받아서 class를 선언하지 않아도
충분히 새로운 정렬기준을 세울 수 있기에 5-1 풀이가 적절할 것입니다.

다만, 제가 처음에 생각했던 방법이었던 부호와 절댓값을 분리해서 class를 선언하는 방식을
사용한다면, 5-2 방법을 사용해야 할 것 같습니다.. 물론 굳이 field를 2개 두지 않고
풀 수 있다고 해서 저는 하나의 field만 두고 그대로 5-2를 방식을 사용하긴 했습니다!